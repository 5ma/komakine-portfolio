---
import ColorChangerCircle from "@components/ColorChangerCircle.astro";
import ProfileDataType from "@components/profileDataType.astro";
---

<header class="header l-sp-inner l-pc-inner">
  <div class="title-wrapper" data-typed-wrapper="title">
    <h1 class="visually-hidden">Anna<br>Komakine</h1>
    {Array.from({ length: 2 }, () => (
      <div class="title-item" data-change-color-target>
        <div class="title" aria-hidden="true" data-typed-output="title"></div>
      </div>
    ))}
  </div>
  <div class="data" data-type="trigger" data-type-target="js-profile-type">
    <span data-typed-output="json" data-change-color-target></span>
    <div class="data__type" id="js-profile-type">
      <ProfileDataType />
    </div>
  </div>
  <dl class="network">
    {
      Array.from({length: 3}, () => (
        <div class="network__item" data-change-color-target>
          <dt class="network__title" data-typed-output="network-title"></dt>
          <dd class="network__description" data-typed-output="network-desc"></dd>
        </div>
      ))
    }
  </dl>
  <div class="color-change">
    <ColorChangerCircle />
  </div>
</header>

<style lang="scss">
  @use 'sass:math';
  @use "@styles/global/" as *;

  .header {
    position: relative;
    padding-top: 41px;

    @include pc {
      padding-top: 62px;
    }
  }

  .title-wrapper {
    position: relative;
    @include fz-vw(65, 375, $breakpointSp, 375 * $font_shrink_sp);
    line-height: 1;
    letter-spacing: -0.03em;
    transition: font-size .4s var(--ease-out3);
    transition: color cubic-bezier(0.83, 0, 0.17, 1) 1s;

    :global(.container:not([data-page="top"])) & { // TOPページ以外のスタイル
      @include fz-vw(13, 375, $breakpointSp, 375 * $font_shrink_sp);
    }

    @include max-w(370) {
      :global([data-page="top"]) & {
        @include fz-vw(61, 370, $breakpointSp, 280);
      }
    }

    @include pc {
      @include fz-vw(180, 1400, 1400 * $font_flex_pc, $breakpointPc);
      line-height: 0.95;
      min-height: 0.95em * 2;
      letter-spacing: -0.01em;

      :global(.container:not([data-page="top"])) & { // TOPページ以外のスタイル
        @include fz-vw(26, 1400, 1400 * $font_flex_pc, $breakpointPc);
      }
    }

    :global(.typed-cursor) {
      font-weight: 400;
    }

    &.is-typed-complete {
      :global(.typed-cursor) {
        display: none;
      }
    }
  }

  .title-item {
    position: relative;
    overflow: hidden;
  }

  .title {
    position: relative;
    text-transform: uppercase;
    width: fit-content;
    min-height: 1em;

    &::after {
      position: absolute;
      left: calc(100% + 0.07em);
      bottom: 0.1em;
      opacity: 0;
      width: 0.65em;
      height: 0.08em;
      background-color: var(--color-theme-current);
      content: '';
      pointer-events: none;
      transition: background-color cubic-bezier(0.83, 0, 0.17, 1) 1s;
    }
    :global(.barba-leave-active) & {
      &::after {
        opacity: 1;
        transition: background-color cubic-bezier(0.83, 0, 0.17, 1) 1s, opacity 0s .1s;
      }
    }
  }

  .data {
    $_this: &;
    position: relative;
    margin-top: 13px;
    @include fz-vw(19, 375, $breakpointSp, 375 * $font_shrink_sp);
    line-height: 1.3;
    letter-spacing: -0.01em;
    min-height: 1.3em;
    transition: font-size .4s var(--ease-out3), color cubic-bezier(0.83, 0, 0.17, 1) 1s;
    cursor: text;

    :global(.container:not([data-page="top"])) & { // TOPページ以外のスタイル
      @include fz-vw(31, 375, $breakpointSp, 375 * $font_shrink_sp);
    }

    @include pc {
      margin-top: 17px;
      @include fz-vw(52, 1400, 1400 * $font_flex_pc, $breakpointPc);

      :global(.container:not([data-page="top"])) & { // TOPページ以外のスタイル
        @include fz-vw(100, 1400, 1400 * $font_flex_pc, $breakpointPc);
      }
    }

    &.is-typed-complete {
      :global(.typed-cursor) {
        display: none;
      }
    }

    &__type {
      position: absolute;
      top: 1.4em;
      left: 10px;
      opacity: 0;
      visibility: hidden;

      :global(.container:not([data-page="top"])) & {
        display: none;
      }

      @include hover-none {
        &.is-show {
          opacity: 1;
          visibility: visible;
        }
      }

      @include hover {
        top: auto;
        left: 8em;
        bottom: 1.5em;

        #{$_this}:hover & {
          opacity: 1;
          visibility: visible;
        }
      }
    }
  }

  .network {
    margin-top: 45px;
    @include fz-vw(9, 375, $breakpointSp, 375 * $font_shrink_sp);
    line-height: 1.3;
    transition: color cubic-bezier(0.83, 0, 0.17, 1) 1s;

    @include pc {
      margin-top: 92px;
      @include fz-vw(14, 1400, 1400 * $font_flex_pc, $breakpointPc);
      letter-spacing: 0.01em;
    }

    &__item {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5em;
      min-height: 1.3em;

      & + & {
        @include pc {
          margin-top: 0.3em;
        }
      }
    }
    &__title {
      font-weight: 600;
      &::after {
        content: ':';
      }
    }
  }

  .color-change {
    position: fixed;
    top: 20px;
    right: 20px;
    width: 50px;
    height: 50px;
    z-index: 50;

    @include pc {
      top: 60px;
      right: 60px;
      width: 100px;
      height: 100px;
    }
  }
</style>
