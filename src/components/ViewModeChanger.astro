---
---

<button type="button" class="button" aria-label="コンテンツの表示形式を切り替える" data-change-view data-change-color-target data-change-color-func="color,childBg">
  <span class="type type--icon">
    <span class="type__icon">
      <span class="type__icon-cube" data-change-bg></span>
      <span class="type__icon-cube" data-change-bg></span>
      <span class="type__icon-cube" data-change-bg></span>
      <span class="type__icon-cube" data-change-bg></span>
    </span>
    Icon View
  </span>
  <span class="type type--list">
    <span class="type__icon">
      <span class="type__icon-bar" data-change-bg></span>
      <span class="type__icon-bar" data-change-bg></span>
      <span class="type__icon-bar" data-change-bg></span>
    </span>
    List View
  </span>
</button>

<style lang="scss">
  @use 'sass:math';
  @use "@styles/global/" as *;

  .button {
    position: relative;
    display: grid;
    align-items: center;
    width: fit-content;
    height: auto;
    padding: 2px 8px;
    margin: 0;
    background: none;
    border: 0;
    border-radius: 4px;

    &:not(:disabled),
    &:not([aria-disabled="true"]) {
      cursor: pointer;
    }

    @include hover {
      transition: background-color .1s;

      &:hover {
        background: rgb(var(--color-selection-blue-rgb) / 0.5);
      }
    }
  }

  .type {
    display: grid;
    gap: 14px;
    align-items: center;
    grid-template-columns: auto auto;
    font-size: px-to-rem(12);
    text-transform: uppercase;

    @include pc {
      gap: 18px;
      font-size: px-to-rem(18);
      letter-spacing: 0.03em;
    }

    &--icon {
      :global(#{$iconViewMode}) & {
        display: none;
      }
    }
    &--list {
      :global(#{$listViewMode}) & {
        display: none;
      }
    }

    &__icon {
      position: relative;
      display: grid;
      gap: 2px;
      grid-template-columns: 1fr 1fr;
      grid-template-rows: 1fr 1fr;
      width: 0.75em;
      height: 0.75em;

      .type--list & {
        gap: 3px;
        grid-template-columns: 1fr;
        grid-template-rows: repeat(3, 1px);
        width: 1em;

        @include pc {
          translate: 0 2px;
          gap: 5px;
        }
      }

      &-cube {
        background-color: var(--color-theme-white);
        // background-color: var(--color-theme-current);
        // transition: background-color cubic-bezier(0.83, 0, 0.17, 1) 1s;
      }

      &-bar {
        position: relative;
        top: -2px;
        height: 1px;
        background-color: var(--color-theme-white);
        // transition: background-color cubic-bezier(0.83, 0, 0.17, 1) 1s;
      }
    }
  }
</style>